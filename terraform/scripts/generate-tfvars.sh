#!/bin/bash

# Exit on error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to print status
print_status() {
    echo -e "${YELLOW}==>${NC} $1" >&2
}

# Function to print success
print_success() {
    echo -e "${GREEN}==>${NC} $1" >&2
}

# Function to print error
print_error() {
    echo -e "${RED}==>${NC} $1" >&2
}

# Function to cleanup temporary files
cleanup() {
    print_status "Cleaning up temporary files..."
    if [ -f "$TFVARS_FILE" ]; then
        rm -f "$TFVARS_FILE"
    fi
    if [ -f "$COMBINED_YAML" ]; then
        rm -f "$COMBINED_YAML"
    fi
    print_success "Cleanup complete"
}

# Set default environment to test
ENVIRONMENT=${ENVIRONMENT:-test}

# Function to get value from YAML file using yq
get_yaml_value() {
    local file=$1
    local path=$2
    local value
    
    if [ ! -f "$file" ]; then
        print_error "Config file not found: $file"
        return 1
    fi
    
    value=$(yq eval "$path" "$file" 2>/dev/null)
    if [ $? -ne 0 ]; then
        print_error "Failed to read value from $file at path $path"
        return 1
    fi
    
    echo "$value"
}

# Function to get JSON value from YAML file using yq
get_yaml_value_as_json() {
    local file=$1
    local path=$2
    local value
    
    if [ ! -f "$file" ]; then
        print_error "Config file not found: $file"
        return 1
    fi
    
    value=$(yq eval -o=json "$path" "$file" 2>/dev/null)
    if [ $? -ne 0 ]; then
        print_error "Failed to read value from $file at path $path"
        return 1
    fi
    
    echo "$value"
}

# Function to combine YAML files
combine_yaml_files() {
    local config_dir=$1
    local env=$2
    local combined_file=$3
    local secrets_file="${config_dir}/secrets/${env}.yaml"
    
    # Start with an empty YAML file
    echo "{}" > "$combined_file"
    
    # Merge each YAML file in order
    for file in pihole.yaml unifi.yaml bootstrap.yaml runner.yaml github.yaml "${env}.yaml"; do
        if [ -f "${config_dir}/${file}" ]; then
            yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$combined_file" "${config_dir}/${file}" > "${combined_file}.tmp"
            mv "${combined_file}.tmp" "$combined_file"
        else
            print_error "Config file not found: ${config_dir}/${file}"
            return 1
        fi
    done

    # Merge secrets file if it exists
    if [ -f "$secrets_file" ]; then
        yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$combined_file" "$secrets_file" > "${combined_file}.tmp"
        mv "${combined_file}.tmp" "$combined_file"
    else
        print_error "Secrets file not found: $secrets_file"
        return 1
    fi
}

# Generate terraform.tfvars
generate_tfvars() {
    print_status "Generating terraform.tfvars for ${ENVIRONMENT} environment..."
    
    # Create temporary files
    TFVARS_FILE="/tmp/terraform.tfvars"
    COMBINED_YAML="/tmp/combined.yaml"
    
    # Get the root directory
    ROOT_DIR="$(cd "$(dirname "$0")/../.." && pwd)"
    CONFIG_DIR="${ROOT_DIR}/config"
    
    # Combine YAML files
    print_status "Combining YAML files..."
    combine_yaml_files "$CONFIG_DIR" "$ENVIRONMENT" "$COMBINED_YAML"
    
    # Write variables to file
    cat > "$TFVARS_FILE" << EOF
# Generated terraform.tfvars for ${ENVIRONMENT} environment
# DO NOT EDIT THIS FILE DIRECTLY

# Environment Configuration
ENVIRONMENT = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.environment")"

# UniFi Configuration
UNIFI_CONTROLLER_URL = "$(get_yaml_value "$COMBINED_YAML" '.unifi.controller_url')"
UNIFI_USERNAME = "$(get_yaml_value "$COMBINED_YAML" '.unifi.username')"
UNIFI_PASSWORD = "$(get_yaml_value "$COMBINED_YAML" '.unifi.password')"
UNIFI_API_KEY = "$(get_yaml_value "$COMBINED_YAML" '.unifi.api_key')"
UNIFI_SITE = "$(get_yaml_value "$COMBINED_YAML" '.unifi.site')"

# Network Configuration
NETWORK = {
  name         = "$(get_yaml_value "$COMBINED_YAML" '.unifi.network.name')"
  subnet       = "$(get_yaml_value "$COMBINED_YAML" '.unifi.network.subnet')"
  gateway      = "$(get_yaml_value "$COMBINED_YAML" '.unifi.network.gateway')"
  dhcp_enabled = $(get_yaml_value "$COMBINED_YAML" '.unifi.network.dhcp_enabled')
  dhcp_start   = "$(get_yaml_value "$COMBINED_YAML" '.unifi.network.dhcp_start')"
  dhcp_stop    = "$(get_yaml_value "$COMBINED_YAML" '.unifi.network.dhcp_stop')"
  dns_servers  = $(get_yaml_value_as_json "$COMBINED_YAML" '.unifi.network.dns_servers')
}

WAN_NETWORKS = $(get_yaml_value_as_json "$COMBINED_YAML" '.unifi.wan_networks')

# Pi-hole Configuration
PIHOLE_URL = "$(get_yaml_value "$COMBINED_YAML" '.pihole.url')"
PIHOLE_API_TOKEN = "$(get_yaml_value "$COMBINED_YAML" '.pihole.api_token')"
PIHOLE_PASSWORD = "$(get_yaml_value "$COMBINED_YAML" '.pihole.password')"

# GitHub Configuration
SERVER_HOST = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.server.host")"
SSH_USER = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.server.ssh_user")"
SSH_PRIVATE_KEY = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.server.ssh_private_key")"
GITHUB_TOKEN = "$(get_yaml_value "$COMBINED_YAML" '.github.token')"
GITHUB_OWNER = "$(get_yaml_value "$COMBINED_YAML" '.github.owner')"
GITHUB_REPO_NAME = "$(get_yaml_value "$COMBINED_YAML" '.github.repo_name')"
GITHUB_RUNNER_TOKEN = "$(get_yaml_value "$COMBINED_YAML" '.github.runner_token')"
GITHUB_SSH_USER = "$(get_yaml_value "$COMBINED_YAML" '.github.ssh.user')"
GITHUB_SERVER_HOST = "$(get_yaml_value "$COMBINED_YAML" '.github.ssh.server_host')"
GITHUB_SSH_PRIVATE_KEY = "$(get_yaml_value "$COMBINED_YAML" '.github.ssh.private_key')"

# Repository Configuration
REPO_URL = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.repo.url")"
REPO_BRANCH = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.repo.branch")"
REPO_PATH = "$(get_yaml_value "$COMBINED_YAML" ".${ENVIRONMENT}.repo.path")"

# Bootstrap Configuration
PACKAGES = $(get_yaml_value_as_json "$COMBINED_YAML" '.bootstrap.packages')
ENV_VARS = $(get_yaml_value_as_json "$COMBINED_YAML" '.bootstrap.env_vars')
COMPOSE_FILES = $(get_yaml_value_as_json "$COMBINED_YAML" '.bootstrap.compose_files')

# GitHub Runner Configuration
RUNNER_NAME = "$(get_yaml_value "$COMBINED_YAML" '.runner.name')"
RUNNER_DIR = "$(get_yaml_value "$COMBINED_YAML" '.runner.dir')"
RUNNER_VERSION = "$(get_yaml_value "$COMBINED_YAML" '.runner.version')"
RUNNER_HASH = "$(get_yaml_value "$COMBINED_YAML" '.runner.hash')"
EOF
    
    # Verify the file was created and is readable
    if [ ! -f "$TFVARS_FILE" ]; then
        print_error "Failed to create terraform.tfvars"
        exit 1
    fi
    
    print_success "Generated terraform.tfvars"
    # Only output the file path to stdout, all other output goes to stderr
    printf "%s" "$TFVARS_FILE"
}

# Main execution
main() {
    print_status "Starting tfvars generation..."
    generate_tfvars
    print_success "Tfvars generation completed" >&2
}

# Run main function with all arguments
main "$@" 